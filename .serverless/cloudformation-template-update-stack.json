{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "SimulatorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/eqsimulator-dev-simulator"
      }
    },
    "AnalizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/eqsimulator-dev-analizer"
      }
    },
    "MqttdispatcherLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/eqsimulator-dev-mqttdispatcher"
      }
    },
    "SimulatorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/eqsimulator/dev/1488906317799-2017-03-07T17:05:17.799Z/eqsimulator.zip"
        },
        "FunctionName": "eqsimulator-dev-simulator",
        "Handler": "src/simulator/index.handler",
        "MemorySize": 128,
        "Role": "arn:aws:iam::511386292871:role/eqsimulator-dev-eu-west-1-lambdaRole",
        "Runtime": "nodejs4.3",
        "Timeout": 60,
        "Description": "Simulate an IOT device capturing an earthquake",
        "Environment": {
          "Variables": {
            "SERVICE": "eqsimulator-dev",
            "STAGE": "dev",
            "REGION": "eu-west-1",
            "DEBUG": 1
          }
        }
      }
    },
    "SimulatorLambdaVersionKuyBhnrQSmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SimulatorLambdaFunction"
        },
        "CodeSha256": "KuyBhnrQ+SmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8="
      }
    },
    "AnalizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/eqsimulator/dev/1488906317799-2017-03-07T17:05:17.799Z/eqsimulator.zip"
        },
        "FunctionName": "eqsimulator-dev-analizer",
        "Handler": "src/analyzer/index.handler",
        "MemorySize": 128,
        "Role": "arn:aws:iam::511386292871:role/eqsimulator-dev-eu-west-1-lambdaRole",
        "Runtime": "nodejs4.3",
        "Timeout": 60,
        "Description": "Analyze data from an MQTT topic",
        "Environment": {
          "Variables": {
            "SERVICE": "eqsimulator-dev",
            "STAGE": "dev",
            "REGION": "eu-west-1",
            "DEBUG": 1
          }
        }
      }
    },
    "AnalizerLambdaVersionKuyBhnrQSmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AnalizerLambdaFunction"
        },
        "CodeSha256": "KuyBhnrQ+SmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8="
      }
    },
    "MqttdispatcherLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/eqsimulator/dev/1488906317799-2017-03-07T17:05:17.799Z/eqsimulator.zip"
        },
        "FunctionName": "eqsimulator-dev-mqttdispatcher",
        "Handler": "src/dispatcher/index.handler",
        "MemorySize": 256,
        "Role": "arn:aws:iam::511386292871:role/eqsimulator-dev-eu-west-1-lambdaRole",
        "Runtime": "nodejs4.3",
        "Timeout": 30,
        "Description": "Publish the payload to a MQTT topic",
        "Environment": {
          "Variables": {
            "SERVICE": "eqsimulator-dev",
            "STAGE": "dev",
            "REGION": "eu-west-1",
            "DEBUG": 1
          }
        }
      }
    },
    "MqttdispatcherLambdaVersionKuyBhnrQSmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MqttdispatcherLambdaFunction"
        },
        "CodeSha256": "KuyBhnrQ+SmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-eqsimulator"
      }
    },
    "ApiGatewayResourcePublish": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "publish",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPublishOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourcePublish"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodPublishPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePublish"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MqttdispatcherLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1488906317954": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodPublishPost"
      ]
    },
    "MqttdispatcherLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MqttdispatcherLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AnalizerIotTopicRule1": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": "EqAnalyzer",
        "TopicRulePayload": {
          "Description": "Get data from the earthquake simulator",
          "RuleDisabled": "false",
          "Sql": "SELECT * FROM 'simulator/topic'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "AnalizerLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ]
        }
      }
    },
    "AnalizerLambdaPermissionIotTopicRule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AnalizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "AnalizerIotTopicRule1"
              }
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "SimulatorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SimulatorLambdaVersionKuyBhnrQSmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8"
      }
    },
    "AnalizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AnalizerLambdaVersionKuyBhnrQSmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8"
      }
    },
    "MqttdispatcherLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MqttdispatcherLambdaVersionKuyBhnrQSmIaZDPmbWU7J752J33ZyK1mEwIEYCNaw8"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.eu-west-1.amazonaws.com/dev"
          ]
        ]
      }
    }
  }
}